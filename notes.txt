1.  work flow logic:
    
    https://www.youtube.com/watch?v=1SXpE08hvGs&ab_channel=Devchild

    https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow


    https://nvie.com/posts/a-successful-git-branching-model/


2. Quality Assurance-Quality Control-Testing

Kalite Güvencesi (Quality Assurence), hata veya kusurun önlenmesini hedefler. 
Kalite kontrol (Quality Control) ise hata veya kusurun tespit edilmesini ve iyileştirilmesini hedefler.  
QA, kaliteyi yönetme tekniğidir. QC, kaliteyi doğrulama tekniğidir.

QA, Yazılım Geliştirme Yaşam Döngüsünden (SDLC) sorumluyken 
QC, Yazılım Test Yaşam Döngüsünden (STLC) sorumludur


3. export PS1="\[\e[31m\]\u\[\e[32m\]@\h-\w:\[\e[36m\]\\$\[\e[m\] "

bashrc yapıstır.

4. git remote set-url origin https://token@url

git branch -M main

5. Password for 'https://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@github.com':
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.
fatal: Authentication failed for 'https://github.com/altunozserkan/petclinic-microservices.git/'
The GitHub BlogThe GitHub Blog
Token authentication requirements for Git operations | The GitHub Blog
Beginning August 13th, 2021, we will no longer accept account passwords when authenticating Git operations on GitHub.com.
Written by
Matthew Langlois
Est. reading time
3 minutes


6. Dockerfile da komutlar:
-x --extract = extract files from an archive
-v, --verbose = verbosely list files processed
-z, --gzip = gzipped files eg. for tar.gz packages
-f, --file ARCHIVE = use archive file or device ARCHIVE

msp-9
7. 
vi ~/.bashrc
alias graph='git log --all --decorate --oneline --graph'
source ~/.bashrc

8. JAcoco kullanımı için:

https://www.eclemma.org/jacoco/trunk/doc/maven.html

9. bashrc

 parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\[\e[36m\]\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "

10. hiç push edilmedi ise github.a tanıtmanız lazım:

git config --global user.email “you@example.com”
  git config --global user.name “Your Name”


11. jenkins aynı anda build yapabilir mi? executor?

https://support.cloudbees.com/hc/en-us/articles/216456477-What-is-a-Jenkins-Executor-and-how-can-I-best-utilize-my-executors
CloudBees SupportCloudBees Support
What is a Jenkins Executor and how can I best utilize my executors
Issue I’d like to understand what is a Jenkins executor, 
and how to best manage executors? How many executors should I allocate to a build agent? 
How many executors should I allocate to the Contro.

12. bkz FILEZILLA

13. https://kompose.io/user-guide/

14. Helm Chart bir Kubernetes uygulaması için gerekli olan bilgiler topluluğunu barındıran dosyadır. Örnek vermek gerekirse Kubernetes deploymentlarında bulunan, service bilgisi, repository bilgisi, ingress bilgisi, 
load balancer bilgisi gibi bir çok bilgiyi yaml formatında barındırır ve versiyonlar.
Helm ayrıca , Kubernetes için bir paket yöneticisidir. Yani , Kubernetes üzerine uygulamaların kurulmasını, yönetilmesini ve konfigürasyonlarının yapılmasına yardımcı olur . Helm “Chart” adı verilen Kubernetes kaynakları için genel bir format ve
klasör yapısı sağlar ve bu kaynakların depolanabilmesi ve paylaşılabilmesi için bir public bir repository  sağlar.

15. Rancher ise, Kubernetes kullanımı son kullanıcı seviyesine getiren container 
yönetimi işlerimizi kolaylaştıran modern bir sanallaştırma yönetim aracıdır.


16. https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/

17. https://helm.sh/

18. artifacthub.io

19. 
helm install rancher rancher-latest/rancher \
  --namespace cattle-system \
  --set hostname=rancher.discoverdevops.com \
  --set tls=external \
  --set replicas=1


20. Uninstall için;
helm uninstall rancher -n cattle-system

21. https://www.youtube.com/c/PracticalNetworking/videos



21. MSP-29

I want to mention the  steps in the nightly build of the project one by one,
First of all, we have created AWS ECR Repo to store images using AWS CLI
Secondly, we packaged the app into jars with maven
Then We prepared Tags for Docker Images
Next, we built App Docker Images
After that, we pushed the images to the ECR Repo (firstly login ECR and push created images.) 
And then we created Key Pair for Ansible and prepared ansible.config and inventory files.
Following this, we created QA Automation Infrastructure by using Cloudformation.
Then, we created a Docker Swarm cluster for QA Automation Build using Ansible.
Next, we deployed the App on Docker Swarm using the docker-compose file.
After that, we run the tests 
we run the Selenium Functional Test on QA Environment using the Ansible playbook file
Finally, we set the pipeline to delete all local images, repository, and cloudformation stack automatically.
The next day morning, we check the Jenkins logs to see if there is any error or
failed job and then check the Grafana dashboards to see the performance or any
metric fails.
 
I want to talk about the Kubernetes tool Rancher used in our project:
I used Rancher to manage our Kubernetes cluster. For creating Rancher, I used Helm's existing repo for Rancher. With Rancher, we easily made changes in the cluster via its dashboard, add nodes, delete nodes, edit configuration files, and used kubectl in its terminal. 
As monitoring tools: we monitored the applications in the cluster with Prometheus and Grafana